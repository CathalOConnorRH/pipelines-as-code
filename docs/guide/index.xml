<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage Guide on Pipelines as Code</title><link>/docs/guide/</link><description>Recent content in Usage Guide on Pipelines as Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/docs/guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Repository CRD</title><link>/docs/guide/repositorycrd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/repositorycrd/</guid><description>Repository CRD # The purposes of the Repository CRD is:
To let Pipelines as Code know that this event from this URL needs to be handled. To let Pipelines as Code know on which namespace the PipelineRuns are going to be executed. To reference a api secret, username or api URL if needed for the git provider platforms that requires it (ie: when you are using webhooks method and not the github application).</description></item><item><title>Resolver</title><link>/docs/guide/resolver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/resolver/</guid><description>Pipelines as Code resolver # If Pipelines as Code sees a PipelineRun with a reference to a Task or a Pipeline, it will tries to resolves it as a single PipelineRun with an embedded PipelineSpec to a PipelineRun.
It will as well transform the Pipeline Name to a generateName based on the Pipeline name as well.
This allows you to have multiple runs in the same namespace from the same PipelineRun with no risk of conflicts.</description></item><item><title>Authoring PipelineRun</title><link>/docs/guide/autoringprs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/autoringprs/</guid><description>Authoring PipelineRuns in .tekton/ directory # Pipelines as Code will always try to be as close to the tekton template as possible. Usually you will write your template and save them with a &amp;ldquo;.yaml&amp;rdquo; extension and Pipelines as Code will run them.
Using its resolver Pipelines as Code will try to bundle the PipelineRun with all its Task as a single PipelineRun with no external dependences.</description></item><item><title>Running the PipelineRun</title><link>/docs/guide/running/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/running/</guid><description>Running the PipelineRun # The user flow looks like this :
A user create a Pull Request (or Merge Request in Gitlab).
Pipelines as Code picks the event and matches to a Repo CRD installed on the cluster.
The user is allowed to run the CI if :
The user is the owner of the repository. The user is a collaborator on the repository.</description></item><item><title>PipelineRun status</title><link>/docs/guide/statuses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/statuses/</guid><description>Status # GitHub # When the pipeline finishes, the status will be added in the Github Check tabs with a short recap of how long each task of your pipeline took and the output of tkn pr describe.
If there was a failure you can click on the &amp;ldquo;Re-Run&amp;rdquo; button on the left to rerun the Pipeline or you can issue a issue comment with a line starting and finishing with the string /retest to ask Pipelines as Code to retest the current PR.</description></item><item><title>Private Repositories</title><link>/docs/guide/privaterepo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/privaterepo/</guid><description>Private repositories # Pipelines as Code support private repositories by creating or updating a secret in the target namespace with the user token for the git-clone task to use and be able to clone private repositories.
Whenever Pipelines as Code create a new PipelineRun in the target namespace it will create or update a secret called :
pac-git-basic-auth-REPOSITORY_OWNER-REPOSITORY_NAME
The secret contains a .gitconfig and a git credentials .git-credentials with the https url using the token it discovered from the Github application or attached to the secret.</description></item><item><title>PipelineRuns Cleanup</title><link>/docs/guide/cleanups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/cleanups/</guid><description>There can be a lot of PipelineRuns into an user namespace and Pipelines as Code has the ability to only keep a number of PipelineRuns that matches an event.
For example if the PipelineRun has this annotation :
pipelinesascode.tekton.dev/max-keep-runs: &amp;#34;maxNumber&amp;#34; Pipelines as Code sees this and will start cleaning up right after it finishes a successful execution keeping only the maxNumber of PipelineRuns.
It will skip the Running PipelineRuns but will not skip the PipelineRuns with Unknown status.</description></item><item><title>CLI tkn-pac</title><link>/docs/guide/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/cli/</guid><description>Pipelines as Code CLI # Pipelines as Code provide a powerful CLI designed to work with tkn plugin. tkn-pac allows you to :
bootstrap: quickly bootstrap a Pipelines as Code installation. create: create a new Pipelines as Code Repository. generate: generate a simple pipelinerun to get you started with Pipelines as Code. list: list Pipelines as Code Repositories. describe: describe a Pipelines as Code Repository and the runs associated with it.</description></item></channel></rss>
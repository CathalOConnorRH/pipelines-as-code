<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipelines as Code</title><link>/</link><description>Recent content on Pipelines as Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>/docs/install/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/overview/</guid><description>Pipelines as Code - Installation # Pipelines-as-Code support different installation method to Git provider platforms (i.e: GitHub, Bitbucket etc..)
The preferred method to use Pipelines-as-Code is configured with a GitHub Application.
Install Pipelines as Code infrastructure # Pipelines-as-Code support different installation method to Git provider platforms (i.e: GitHub, Bitbucket etc..) The preferred method to use Pipelines-as-Code is configured with a GitHub Application.
In order to get started with Pipelines-as-Code, you need to</description></item><item><title>Repository CRD</title><link>/docs/guide/repositorycrd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/repositorycrd/</guid><description>Repository CRD # The purposes of the Repository CRD is:
To let Pipelines as Code know that this event from this URL needs to be handled. To let Pipelines as Code know on which namespace the PipelineRuns are going to be executed. To reference a api secret, username or api URL if needed for the git provider platforms that requires it (ie: when you are using webhooks method and not the github application).</description></item><item><title>Infrastructure install</title><link>/docs/install/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/installation/</guid><description>Manual install # To install Pipelines as Code on your cluster you simply need to run this command :
VERSION=0.5.5 kubectl apply -f https://raw.githubusercontent.com/openshift-pipelines/pipelines-as-code/stable/release.yaml If you would like to install the current development version you can simply install it like this :
kubectl apply -f https://raw.githubusercontent.com/openshift-pipelines/pipelines-as-code/nightly/release.yaml This will apply the release.yaml to your kubernetes cluster, creating the admin namespace pipelines-as-code, the roles and all other bits needed.
The pipelines-as-code namespace is where the Pipelines-as-Code infrastructure runs and is supposed to be accessible only by the admins.</description></item><item><title>Resolver</title><link>/docs/guide/resolver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/resolver/</guid><description>Pipelines as Code resolver # If Pipelines as Code sees a PipelineRun with a reference to a Task or a Pipeline, it will tries to resolves it as a single PipelineRun with an embedded PipelineSpec to a PipelineRun.
It will as well transform the Pipeline Name to a generateName based on the Pipeline name as well.
This allows you to have multiple runs in the same namespace from the same PipelineRun with no risk of conflicts.</description></item><item><title>Authoring PipelineRun</title><link>/docs/guide/autoringprs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/autoringprs/</guid><description>Authoring PipelineRuns in .tekton/ directory # Pipelines as Code will always try to be as close to the tekton template as possible. Usually you will write your template and save them with a &amp;ldquo;.yaml&amp;rdquo; extension and Pipelines as Code will run them.
Using its resolver Pipelines as Code will try to bundle the PipelineRun with all its Task as a single PipelineRun with no external dependencies.</description></item><item><title>Settings</title><link>/docs/install/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/settings/</guid><description>Pipelines-As-Code configuration settings # There is a few things you can configure via the configmap pipelines-as-code in the pipelines-as-code namespace.
application-name
The name of the application showing for example in the GitHub Checks labels. Default to &amp;quot;Pipelines as Code CI&amp;quot;
max-keep-days
The number of the day to keep the PipelineRuns runs in the pipelines-as-code namespace. We install by default a cronjob that cleans up the PipelineRuns generated on events in pipelines-as-code namespace.</description></item><item><title>Running the PipelineRun</title><link>/docs/guide/running/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/running/</guid><description>Running the PipelineRun # The user flow looks like this :
A user create a Pull Request (or Merge Request in Gitlab).
Pipelines as Code picks the event and matches to a Repo CRD installed on the cluster.
The user is allowed to run the CI if :
The user is the owner of the repository. The user is a collaborator on the repository.</description></item><item><title>PipelineRun status</title><link>/docs/guide/statuses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/statuses/</guid><description>Status # GitHub # When the pipeline finishes, the status will be added in the Github Check tabs with a short recap of how long each task of your pipeline took and the output of tkn pr describe.
If there was a failure you can click on the &amp;ldquo;Re-Run&amp;rdquo; button on the left to rerun the Pipeline or you can issue a issue comment with a line starting and finishing with the string /retest to ask Pipelines as Code to retest the current PR.</description></item><item><title>Private Repositories</title><link>/docs/guide/privaterepo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/privaterepo/</guid><description>Private repositories # Pipelines as Code support private repositories by creating or updating a secret in the target namespace with the user token for the git-clone task to use and be able to clone private repositories.
Whenever Pipelines as Code create a new PipelineRun in the target namespace it will create or update a secret called :
pac-git-basic-auth-REPOSITORY_OWNER-REPOSITORY_NAME
The secret contains a .gitconfig and a git credentials .git-credentials with the https url using the token it discovered from the Github application or attached to the secret.</description></item><item><title>PipelineRuns Cleanup</title><link>/docs/guide/cleanups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/cleanups/</guid><description>PipelineRuns Cleanups # There can be a lot of PipelineRuns into an user namespace and Pipelines as Code has the ability to only keep a number of PipelineRuns that matches an event.
For example if the PipelineRun has this annotation :
pipelinesascode.tekton.dev/max-keep-runs: &amp;#34;maxNumber&amp;#34; Pipelines as Code sees this and will start cleaning up right after it finishes a successful execution keeping only the maxNumber of PipelineRuns.
It will skip the Running PipelineRuns but will not skip the PipelineRuns with Unknown status.</description></item><item><title>CLI tkn-pac</title><link>/docs/guide/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/guide/cli/</guid><description>Pipelines as Code CLI # Pipelines as Code provide a powerful CLI designed to work with tkn plugin. tkn-pac allows you to :
bootstrap: quickly bootstrap a Pipelines as Code installation. create: create a new Pipelines as Code Repository. generate: generate a simple pipelinerun to get you started with Pipelines as Code. list: list Pipelines as Code Repositories. describe: describe a Pipelines as Code Repository and the runs associated with it.</description></item><item><title>Github Apps</title><link>/docs/install/github_apps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/github_apps/</guid><description>Create a Pipelines-as-Code GitHub App # The GitHub App install is different than other install methods since it acts as the integration point with OpenShift Pipelines and brings the Git workflow into Tekton pipelines. You only need one GitHub App for every users on the cluster usually setup by the admin.
You need the webhook of the GitHub App to point to your Pipelines-as-Code Controller route/ingress endpoint which would listen to GitHub events.</description></item><item><title>Github Webhook</title><link>/docs/install/github_webhook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/github_webhook/</guid><description>Install Pipelines-as-Code as a GitHub Webhook # If you are not able to create a GitHub application you can install Pipelines-as-Code on your repository as a GitHub Webhook.
Using Pipelines as Code via Github webhook does not give you access to the GitHub CheckRun API, therefore the status of the tasks will be added as a Comment of the PR and not via the Checks Tab.
After you have finished the infrastructure installation you can generate an app password for Pipelines-as-Code Github API operations.</description></item><item><title>Gitlab</title><link>/docs/install/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/gitlab/</guid><description>Install Pipelines-as-Code for Gitlab # Pipelines-As-Code supports Gitlab via a webhook.
Following the infrastructure installation:
You will have to generate a personal token as the manager of the Org or the Project, follow the steps here :
https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html
Note: You can create a token scoped only to the project. Since the token needs to be able to have api access to the forked repository from where the MR come from, it will fail to do it with a project scoped token.</description></item><item><title>Bitbucket Cloud</title><link>/docs/install/bitbucket_cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/bitbucket_cloud/</guid><description>Install Pipelines-As-Code for Bitbucket Cloud # Pipelines-As-Code has a full support on Bitbucket Cloud (https://bitbucket.org) as Webhook.
After you have finished the infrastructure installation you can generate an app password for Pipelines-as-Code Bitbucket API operations.
Follow this guide to create an app password :
https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/
check these boxes to add the permissions to the token :
Account: Email, Read Workspace membership: Read, Write Projects: Read, Write Issues: Read, Write Pull requests: Read, Write Refer to this screenshot to make sure you have properly configured the app password.</description></item><item><title>Bitbucket Server</title><link>/docs/install/bitbucket_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/bitbucket_server/</guid><description>Install Pipelines-As-Code on Bitbucket Server # Pipelines-As-Code has a full support of Bitbucket Server.
Following the infrastructure installation :
You will have to generate a personal token as the manager of the Project, follow the steps here : https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html
The token will need to have the PROJECT_ADMIN and REPOSITORY_ADMIN permissions.
Note that the token needs to be able to have access to the forked repository in pull requests or it would not be able to process and access the pull request.</description></item><item><title>Kubernetes</title><link>/docs/install/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/install/kubernetes/</guid><description>Kubernetes # Pipelines as Code should work directly on kubernetes/minikube/kind. You just need to install the release.yaml for pipeline , triggers and its interceptors on your cluster. The release yaml to install pipelines are for the released version :
VERSION=0.5.3 kubectl apply -f https://raw.githubusercontent.com/openshift-pipelines/pipelines-as-code/stable/release.k8s.yaml and for the nightly :
kubectl apply -f https://raw.githubusercontent.com/openshift-pipelines/pipelines-as-code/nightly/release.k8s.yaml If you have Tekton Dashboard. You can just add the key tekton-dashboard-url in the pipelines-as-code configmap set to the full url of the Ingress host to get tekton dashboard logs url.</description></item><item><title/><link>/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/links/</guid><description>Pipelines as Code - Links # Jira Backlog Providers Doc # Bitbucket Server Rest API: https://docs.atlassian.com/bitbucket-server/rest/7.17.0/bitbucket-rest.html Github API: https://docs.github.com/en/rest/reference Gitlab API: https://docs.gitlab.com/ee/api/api_resources.html</description></item><item><title>Pipelines as Code Release Process</title><link>/dev/release-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dev/release-process/</guid><description>Release process for Pipelines as Code # Clear out the PR needed to be merged. Wait that CI is connected. Make sure the CI PAC cluster is up. Make sure you have gpg signing setup for your commits. You need to install python package semver : pip3 install --user semver Use this script which should do most things : ./hack/make-release.sh Choose a version if it&amp;rsquo;s a major release/minor or patch release and let it push the new tags which should kick off pipelines as code release pipelines.</description></item></channel></rss>